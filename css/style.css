/*Импортирование - ещё один подход к подключению сторонних стилей. Отличие от того же связывания заключается лишь в том,
что подключение файла происходит через CSS, а не через HTML. Есть два варианта - по названию и с использованием внутренней
функции url. Первый случай удобен, если вы работаете в пределах своего проекта и импортируете стили из-под проекта. Второй
удобен, если вы берёте стили из Интернета или откуда-нибудь ещё, где нужно указывать адрес.
Импортировать стили можно из файла в файл, или же импортировать в тег style в HTML. Тут уже кому как.*/
@import "import_style.css"; /*Запомните эту строку*/
@import url("https://example.com");

/*Данная запись называется инструкцией для CSS, которая состоит из селектора (объекта, к которому необходимо применить стиль)
 и определения*/
p /*Всё, что стоит до фигурной скобки называете селектором*/ {
    color: red; /*Данная строка называется определением, или же командой, кому как удобно. Она состоит из двух частей -
    свойства и значения, разделённых двоеточием. Свойства для разных элементов свои, как и их значения. Необходимо
    подстраиваться под ситуацию и выбирать нужные свойства и значения. В данном случае свойство color - это свойство для
    указания цвета текста, а red - значение этого свойства (англ. красный). Каждая команда в конце отделяется точкой с
    запятой, говоря CSS, что дальше следует другая команда. После последней команды в блоке ставить этот знак необязательно.
    Сам же блок находится между фигурных скобок, которые указывают на то, к какому элементу и до какого момента необходимо
    применять стили.

    Стоит также отметить, что селекторы имеют различные варианты написания для удобства манипуляции со стилями элементов.
    Например, в случае выше селектор написан в виде названия элемента HTML - абзаца (p). Такой селектор называется типовым
    (то есть применяет стиль к конкретному типу элемента). Если говорить кратко - любой элемент в HTML, который имеет
    данный тип, вне зависимости от количества, применить данный стиль к себе. С такими селекторами стоит работать очень
    осторожно, потому что работать с ними крайне тяжело в пределах документа.
    */
}

/*Селектор класса - самый удобный селектор для объединения и систематизации стилей. Сам селектор состоит из точки в начале,
которая указывает на то, что это селектор класса, ну и самого названия класса соответственно. Класс - группа объектов,
объединённых между собой какими-то общими признаками. В данном случае под признаком мы подразумеваем стиль, который будет
применён к объектам данного класса. Один класс могут иметь сразу несколько объектов, причём они могут быть совершенно разных
типов. Такой подход очень полезен для создания общих стилей, когда у некоторых элементов есть схожие параметры, и их просто
лень прописывать для каждого.*/
.green_background {
    background-color: lawngreen; /* В данном случае параметр background-color указывает цвет заднего фона элемента, а
    значение цвета lawngreen (англ. газонный, название шикарное, согласен).*/
}

/*Селектор идентификатора - по сути своей чем то похож на класс. Однако в отличие от класса его необходимо желательно
использовать только один раз в документе. Другими словами, вы его присвоили одному элементу, в дальнейшем присваивать его
другим уже нельзя. Такой подход необходим для создания уникальности элементов при обработке логики, поскольку необходимо
получать данные из конкретных элементов, и идентификатор прекрасно справляется с этой ролью, давая буквально "имя" элементу.
Само собой от повторного использования идентификатора вас никто не ограничивает, однако на практике за такое вам дадут пинка
под зад. Так что не устраивайте себе садомазу, и зарубите себе на носу - ID уникален везде и для всего. Селектор идентификатора
пишется следующим образом, сначала ставится знак решётку, а за ним соответственно - название идентификатора.*/
#bold_border {
    border: 10px solid black; /* В данном случае параметр border указывает рамку элемента, значение 10px - размер 10 пикселей,
    solid - тип рамки "сплошная", black - цвет.*/
}

/*Остальное объяснение найдите в import_style. Как раз пойдёте как import отработал на деле*/
