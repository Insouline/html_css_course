/*Каскадные таблицы стилей - макияж для нашей HTML-страницы. Делает красиво, классно, чётко. Однако с ними надо уметь
работать. Для того, чтобы стилизовать элементы, CSS необходимо понять, с чем ему необходимо работать. Для этого существуют 3
возможных варианта обращения: по названию элемента, по классу элемента и по идентификатору (ID) элемента. Представлены ниже:*/

/*Данная конструкция применяет все инструкции между фигурными скобками конкретно к элементу p. Другими словами, ко всем
элементам p на странице будем применён этот стиль. Не забываем открывать и закрывать фигурные скобки, они указывают к
какому элементу и до какого момента к нему применяются стили.*/
p {
    color: red; /*устанавливает цвет текста на красный*/
}

/*Данная конструкция применяет все инструкции между фигурными скобками конкретно к классу объектов
bigger_font. Класс - группа объектов с похожими свойствами. Другими словами, классом мы объединяем объекты в одну группу
для более удобной стилизации, ведь достаточно описать один класс сразу и применять его параметры к элементам просто по названию
самого класса, без необходимости описывать свойства по несколько раз. Перед названием класса в CSS ставится точка (.название класса).*/
.class {
    font-size: 50px; /*Увеличиваем размер шрифта на 50px*/
    background-color: black;
}

/*Данная конструкция применяет все инструкции между фигурными скобками конкретно по идентификатору объекта. Отличие от
класса в том, что идентификатор должен использоваться только один раз для одного элемента. Сделано это для того, чтобы
было проще находить конкретный элемент с помощью JavaScript или CSS. Перед названием класса в CSS ставится решётка (#название класса).*/
#id {
    font-family: "Comic Sans MS", sans-serif; /*Меняет стиль шрифта на Comic Sans Ms, без засечек (без хвостиков у букв и т.д.)*/
}

/*Здесь мы задаёт общий стиль для блока div_class, а именно пытаемся расположить элементы по другому в блоке*/
.div_class {
    display: flex; /*Параметр display устанавливает тип отображения элементов, значение flex - создаёт гибкий контейнер,
    который, позволяет элементы внутри распологать по столбцам и рядам, а также контролировать их размер, порядок и выравнивание*/
}